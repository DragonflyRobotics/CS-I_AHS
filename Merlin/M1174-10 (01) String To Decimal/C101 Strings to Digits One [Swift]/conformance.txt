(source_file "main.swift"
  (top_level_code_decl range=[main.swift:3:1 - line:3:14]
    (brace_stmt implicit range=[main.swift:3:1 - line:3:14]
      (pattern_binding_decl range=[main.swift:3:1 - line:3:14]
        (pattern_named type='String' 'string')
        Original init:
        (string_literal_expr type='String' location=main.swift:3:14 range=[main.swift:3:14 - line:3:14] encoding=utf8 value=" 5 " builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
        Processed init:
        (string_literal_expr type='String' location=main.swift:3:14 range=[main.swift:3:14 - line:3:14] encoding=utf8 value=" 5 " builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))
))
  (var_decl range=[main.swift:3:5 - line:3:5] "string" type='String' interface type='String' access=internal let readImpl=stored immutable)
  (top_level_code_decl range=[main.swift:4:1 - line:4:9]
    (brace_stmt implicit range=[main.swift:4:1 - line:4:9]
      (pattern_binding_decl range=[main.swift:4:1 - line:4:9]
        (pattern_named type='Int' 'm')
        Original init:
        (integer_literal_expr type='Int' location=main.swift:4:9 range=[main.swift:4:9 - line:4:9] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)
        Processed init:
        (integer_literal_expr type='Int' location=main.swift:4:9 range=[main.swift:4:9 - line:4:9] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**))
))
  (var_decl range=[main.swift:4:5 - line:4:5] "m" type='Int' interface type='Int' access=internal let readImpl=stored immutable)
  (import_decl range=[main.swift:7:1 - line:7:8] 'Foundation')
  (func_decl range=[main.swift:9:1 - line:33:1] "charConv(string:)" interface type='(String) -> Int' access=internal
    (parameter_list range=[main.swift:9:14 - line:9:29]
      (parameter "string" apiName=string type='String' interface type='String'))
    (result
      (type_ident
        (component id='Int' bind=Swift.(file).Int)))
    (brace_stmt range=[main.swift:9:39 - line:33:1]
      (if_stmt range=[main.swift:10:5 - line:32:5]
        (call_expr type='Bool' location=main.swift:10:15 range=[main.swift:10:8 - line:10:27] nothrow
          (dot_syntax_call_expr type='(String) -> Bool' location=main.swift:10:15 range=[main.swift:10:8 - line:10:15] nothrow
            (declref_expr type='(String) -> (String) -> Bool' location=main.swift:10:15 range=[main.swift:10:15 - line:10:15] decl=Foundation.(file).StringProtocol extension.contains [with (substitution_map generic_signature=<Self, T where Self : StringProtocol, T : StringProtocol> (substitution Self -> String) (substitution T -> String))] function_ref=single)
            (argument_list implicit
              (argument
                (declref_expr type='String' location=main.swift:10:8 range=[main.swift:10:8 - line:10:8] decl=main.(file).charConv(string:).string@main.swift:9:15 function_ref=unapplied))
            ))
          (argument_list
            (argument
              (string_literal_expr type='String' location=main.swift:10:24 range=[main.swift:10:24 - line:10:24] encoding=utf8 value="0" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))
          ))
        (brace_stmt range=[main.swift:10:29 - line:12:5]
          (return_stmt range=[main.swift:11:9 - line:11:16]
            (integer_literal_expr type='Int' location=main.swift:11:16 range=[main.swift:11:16 - line:11:16] value=0 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))
        (if_stmt range=[main.swift:12:12 - line:32:5]
          (call_expr type='Bool' location=main.swift:12:22 range=[main.swift:12:15 - line:12:34] nothrow
            (dot_syntax_call_expr type='(String) -> Bool' location=main.swift:12:22 range=[main.swift:12:15 - line:12:22] nothrow
              (declref_expr type='(String) -> (String) -> Bool' location=main.swift:12:22 range=[main.swift:12:22 - line:12:22] decl=Foundation.(file).StringProtocol extension.contains [with (substitution_map generic_signature=<Self, T where Self : StringProtocol, T : StringProtocol> (substitution Self -> String) (substitution T -> String))] function_ref=single)
              (argument_list implicit
                (argument
                  (declref_expr type='String' location=main.swift:12:15 range=[main.swift:12:15 - line:12:15] decl=main.(file).charConv(string:).string@main.swift:9:15 function_ref=unapplied))
              ))
            (argument_list
              (argument
                (string_literal_expr type='String' location=main.swift:12:31 range=[main.swift:12:31 - line:12:31] encoding=utf8 value="1" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))
            ))
          (brace_stmt range=[main.swift:12:36 - line:14:5]
            (return_stmt range=[main.swift:13:9 - line:13:16]
              (integer_literal_expr type='Int' location=main.swift:13:16 range=[main.swift:13:16 - line:13:16] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))
          (if_stmt range=[main.swift:14:12 - line:32:5]
            (call_expr type='Bool' location=main.swift:14:22 range=[main.swift:14:15 - line:14:34] nothrow
              (dot_syntax_call_expr type='(String) -> Bool' location=main.swift:14:22 range=[main.swift:14:15 - line:14:22] nothrow
                (declref_expr type='(String) -> (String) -> Bool' location=main.swift:14:22 range=[main.swift:14:22 - line:14:22] decl=Foundation.(file).StringProtocol extension.contains [with (substitution_map generic_signature=<Self, T where Self : StringProtocol, T : StringProtocol> (substitution Self -> String) (substitution T -> String))] function_ref=single)
                (argument_list implicit
                  (argument
                    (declref_expr type='String' location=main.swift:14:15 range=[main.swift:14:15 - line:14:15] decl=main.(file).charConv(string:).string@main.swift:9:15 function_ref=unapplied))
                ))
              (argument_list
                (argument
                  (string_literal_expr type='String' location=main.swift:14:31 range=[main.swift:14:31 - line:14:31] encoding=utf8 value="2" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))
              ))
            (brace_stmt range=[main.swift:14:36 - line:16:5]
              (return_stmt range=[main.swift:15:9 - line:15:16]
                (integer_literal_expr type='Int' location=main.swift:15:16 range=[main.swift:15:16 - line:15:16] value=2 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))
            (if_stmt range=[main.swift:16:12 - line:32:5]
              (call_expr type='Bool' location=main.swift:16:22 range=[main.swift:16:15 - line:16:34] nothrow
                (dot_syntax_call_expr type='(String) -> Bool' location=main.swift:16:22 range=[main.swift:16:15 - line:16:22] nothrow
                  (declref_expr type='(String) -> (String) -> Bool' location=main.swift:16:22 range=[main.swift:16:22 - line:16:22] decl=Foundation.(file).StringProtocol extension.contains [with (substitution_map generic_signature=<Self, T where Self : StringProtocol, T : StringProtocol> (substitution Self -> String) (substitution T -> String))] function_ref=single)
                  (argument_list implicit
                    (argument
                      (declref_expr type='String' location=main.swift:16:15 range=[main.swift:16:15 - line:16:15] decl=main.(file).charConv(string:).string@main.swift:9:15 function_ref=unapplied))
                  ))
                (argument_list
                  (argument
                    (string_literal_expr type='String' location=main.swift:16:31 range=[main.swift:16:31 - line:16:31] encoding=utf8 value="3" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))
                ))
              (brace_stmt range=[main.swift:16:36 - line:18:5]
                (return_stmt range=[main.swift:17:9 - line:17:16]
                  (integer_literal_expr type='Int' location=main.swift:17:16 range=[main.swift:17:16 - line:17:16] value=3 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))
              (if_stmt range=[main.swift:18:12 - line:32:5]
                (call_expr type='Bool' location=main.swift:18:22 range=[main.swift:18:15 - line:18:34] nothrow
                  (dot_syntax_call_expr type='(String) -> Bool' location=main.swift:18:22 range=[main.swift:18:15 - line:18:22] nothrow
                    (declref_expr type='(String) -> (String) -> Bool' location=main.swift:18:22 range=[main.swift:18:22 - line:18:22] decl=Foundation.(file).StringProtocol extension.contains [with (substitution_map generic_signature=<Self, T where Self : StringProtocol, T : StringProtocol> (substitution Self -> String) (substitution T -> String))] function_ref=single)
                    (argument_list implicit
                      (argument
                        (declref_expr type='String' location=main.swift:18:15 range=[main.swift:18:15 - line:18:15] decl=main.(file).charConv(string:).string@main.swift:9:15 function_ref=unapplied))
                    ))
                  (argument_list
                    (argument
                      (string_literal_expr type='String' location=main.swift:18:31 range=[main.swift:18:31 - line:18:31] encoding=utf8 value="4" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))
                  ))
                (brace_stmt range=[main.swift:18:36 - line:20:5]
                  (return_stmt range=[main.swift:19:9 - line:19:16]
                    (integer_literal_expr type='Int' location=main.swift:19:16 range=[main.swift:19:16 - line:19:16] value=4 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))
                (if_stmt range=[main.swift:20:12 - line:32:5]
                  (call_expr type='Bool' location=main.swift:20:22 range=[main.swift:20:15 - line:20:34] nothrow
                    (dot_syntax_call_expr type='(String) -> Bool' location=main.swift:20:22 range=[main.swift:20:15 - line:20:22] nothrow
                      (declref_expr type='(String) -> (String) -> Bool' location=main.swift:20:22 range=[main.swift:20:22 - line:20:22] decl=Foundation.(file).StringProtocol extension.contains [with (substitution_map generic_signature=<Self, T where Self : StringProtocol, T : StringProtocol> (substitution Self -> String) (substitution T -> String))] function_ref=single)
                      (argument_list implicit
                        (argument
                          (declref_expr type='String' location=main.swift:20:15 range=[main.swift:20:15 - line:20:15] decl=main.(file).charConv(string:).string@main.swift:9:15 function_ref=unapplied))
                      ))
                    (argument_list
                      (argument
                        (string_literal_expr type='String' location=main.swift:20:31 range=[main.swift:20:31 - line:20:31] encoding=utf8 value="5" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))
                    ))
                  (brace_stmt range=[main.swift:20:36 - line:22:5]
                    (return_stmt range=[main.swift:21:9 - line:21:16]
                      (integer_literal_expr type='Int' location=main.swift:21:16 range=[main.swift:21:16 - line:21:16] value=5 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))
                  (if_stmt range=[main.swift:22:12 - line:32:5]
                    (call_expr type='Bool' location=main.swift:22:22 range=[main.swift:22:15 - line:22:34] nothrow
                      (dot_syntax_call_expr type='(String) -> Bool' location=main.swift:22:22 range=[main.swift:22:15 - line:22:22] nothrow
                        (declref_expr type='(String) -> (String) -> Bool' location=main.swift:22:22 range=[main.swift:22:22 - line:22:22] decl=Foundation.(file).StringProtocol extension.contains [with (substitution_map generic_signature=<Self, T where Self : StringProtocol, T : StringProtocol> (substitution Self -> String) (substitution T -> String))] function_ref=single)
                        (argument_list implicit
                          (argument
                            (declref_expr type='String' location=main.swift:22:15 range=[main.swift:22:15 - line:22:15] decl=main.(file).charConv(string:).string@main.swift:9:15 function_ref=unapplied))
                        ))
                      (argument_list
                        (argument
                          (string_literal_expr type='String' location=main.swift:22:31 range=[main.swift:22:31 - line:22:31] encoding=utf8 value="6" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))
                      ))
                    (brace_stmt range=[main.swift:22:36 - line:24:5]
                      (return_stmt range=[main.swift:23:9 - line:23:16]
                        (integer_literal_expr type='Int' location=main.swift:23:16 range=[main.swift:23:16 - line:23:16] value=6 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))
                    (if_stmt range=[main.swift:24:12 - line:32:5]
                      (call_expr type='Bool' location=main.swift:24:22 range=[main.swift:24:15 - line:24:34] nothrow
                        (dot_syntax_call_expr type='(String) -> Bool' location=main.swift:24:22 range=[main.swift:24:15 - line:24:22] nothrow
                          (declref_expr type='(String) -> (String) -> Bool' location=main.swift:24:22 range=[main.swift:24:22 - line:24:22] decl=Foundation.(file).StringProtocol extension.contains [with (substitution_map generic_signature=<Self, T where Self : StringProtocol, T : StringProtocol> (substitution Self -> String) (substitution T -> String))] function_ref=single)
                          (argument_list implicit
                            (argument
                              (declref_expr type='String' location=main.swift:24:15 range=[main.swift:24:15 - line:24:15] decl=main.(file).charConv(string:).string@main.swift:9:15 function_ref=unapplied))
                          ))
                        (argument_list
                          (argument
                            (string_literal_expr type='String' location=main.swift:24:31 range=[main.swift:24:31 - line:24:31] encoding=utf8 value="7" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))
                        ))
                      (brace_stmt range=[main.swift:24:36 - line:26:5]
                        (return_stmt range=[main.swift:25:9 - line:25:16]
                          (integer_literal_expr type='Int' location=main.swift:25:16 range=[main.swift:25:16 - line:25:16] value=7 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))
                      (if_stmt range=[main.swift:26:12 - line:32:5]
                        (call_expr type='Bool' location=main.swift:26:22 range=[main.swift:26:15 - line:26:34] nothrow
                          (dot_syntax_call_expr type='(String) -> Bool' location=main.swift:26:22 range=[main.swift:26:15 - line:26:22] nothrow
                            (declref_expr type='(String) -> (String) -> Bool' location=main.swift:26:22 range=[main.swift:26:22 - line:26:22] decl=Foundation.(file).StringProtocol extension.contains [with (substitution_map generic_signature=<Self, T where Self : StringProtocol, T : StringProtocol> (substitution Self -> String) (substitution T -> String))] function_ref=single)
                            (argument_list implicit
                              (argument
                                (declref_expr type='String' location=main.swift:26:15 range=[main.swift:26:15 - line:26:15] decl=main.(file).charConv(string:).string@main.swift:9:15 function_ref=unapplied))
                            ))
                          (argument_list
                            (argument
                              (string_literal_expr type='String' location=main.swift:26:31 range=[main.swift:26:31 - line:26:31] encoding=utf8 value="8" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))
                          ))
                        (brace_stmt range=[main.swift:26:36 - line:28:5]
                          (return_stmt range=[main.swift:27:9 - line:27:16]
                            (integer_literal_expr type='Int' location=main.swift:27:16 range=[main.swift:27:16 - line:27:16] value=8 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))
                        (if_stmt range=[main.swift:28:12 - line:32:5]
                          (call_expr type='Bool' location=main.swift:28:22 range=[main.swift:28:15 - line:28:34] nothrow
                            (dot_syntax_call_expr type='(String) -> Bool' location=main.swift:28:22 range=[main.swift:28:15 - line:28:22] nothrow
                              (declref_expr type='(String) -> (String) -> Bool' location=main.swift:28:22 range=[main.swift:28:22 - line:28:22] decl=Foundation.(file).StringProtocol extension.contains [with (substitution_map generic_signature=<Self, T where Self : StringProtocol, T : StringProtocol> (substitution Self -> String) (substitution T -> String))] function_ref=single)
                              (argument_list implicit
                                (argument
                                  (declref_expr type='String' location=main.swift:28:15 range=[main.swift:28:15 - line:28:15] decl=main.(file).charConv(string:).string@main.swift:9:15 function_ref=unapplied))
                              ))
                            (argument_list
                              (argument
                                (string_literal_expr type='String' location=main.swift:28:31 range=[main.swift:28:31 - line:28:31] encoding=utf8 value="9" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))
                            ))
                          (brace_stmt range=[main.swift:28:36 - line:30:5]
                            (return_stmt range=[main.swift:29:9 - line:29:16]
                              (integer_literal_expr type='Int' location=main.swift:29:16 range=[main.swift:29:16 - line:29:16] value=9 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))
                          (brace_stmt range=[main.swift:30:12 - line:32:5]
                            (return_stmt range=[main.swift:31:9 - line:31:16]
                              (integer_literal_expr type='Int' location=main.swift:31:16 range=[main.swift:31:16 - line:31:16] value=0 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)))))))))))))))
  (top_level_code_decl range=[main.swift:35:1 - line:35:34]
    (brace_stmt implicit range=[main.swift:35:1 - line:35:34]
      (pattern_binding_decl range=[main.swift:35:1 - line:35:34]
        (pattern_named type='Int' 'num')
        Original init:
        (call_expr type='Int' location=main.swift:35:11 range=[main.swift:35:11 - line:35:34] nothrow
          (declref_expr type='(String) -> Int' location=main.swift:35:11 range=[main.swift:35:11 - line:35:11] decl=main.(file).charConv(string:)@main.swift:9:6 function_ref=single)
          (argument_list labels=string:
            (argument label=string
              (declref_expr type='String' location=main.swift:35:28 range=[main.swift:35:28 - line:35:28] decl=main.(file).string@main.swift:3:5 function_ref=unapplied))
          ))
        Processed init:
        (call_expr type='Int' location=main.swift:35:11 range=[main.swift:35:11 - line:35:34] nothrow
          (declref_expr type='(String) -> Int' location=main.swift:35:11 range=[main.swift:35:11 - line:35:11] decl=main.(file).charConv(string:)@main.swift:9:6 function_ref=single)
          (argument_list labels=string:
            (argument label=string
              (declref_expr type='String' location=main.swift:35:28 range=[main.swift:35:28 - line:35:28] decl=main.(file).string@main.swift:3:5 function_ref=unapplied))
          )))
))
  (var_decl range=[main.swift:35:5 - line:35:5] "num" type='Int' interface type='Int' access=internal let readImpl=stored immutable)
  (top_level_code_decl range=[main.swift:36:1 - line:36:10]
    (brace_stmt implicit range=[main.swift:36:1 - line:36:10]
      (call_expr type='()' location=main.swift:36:1 range=[main.swift:36:1 - line:36:10] nothrow
        (declref_expr type='(Any..., String, String) -> ()' location=main.swift:36:1 range=[main.swift:36:1 - line:36:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (argument_list labels=_:separator:terminator:
          (argument
            (vararg_expansion_expr implicit type='Any...' location=main.swift:36:7 range=[main.swift:36:7 - line:36:7]
              (array_expr implicit type='Any...' location=main.swift:36:7 range=[main.swift:36:7 - line:36:7] initializer=**NULL**
                (erasure_expr implicit type='Any' location=main.swift:36:7 range=[main.swift:36:7 - line:36:7]
                  (declref_expr type='Int' location=main.swift:36:7 range=[main.swift:36:7 - line:36:7] decl=main.(file).num@main.swift:35:5 function_ref=unapplied)))))
          (argument label=separator
            (default_argument_expr implicit type='String' location=main.swift:36:6 range=[main.swift:36:6 - line:36:6] default_args_owner=Swift.(file).print(_:separator:terminator:) param=1))
          (argument label=terminator
            (default_argument_expr implicit type='String' location=main.swift:36:6 range=[main.swift:36:6 - line:36:6] default_args_owner=Swift.(file).print(_:separator:terminator:) param=2))
        ))))
  (top_level_code_decl range=[main.swift:37:1 - line:37:12]
    (brace_stmt implicit range=[main.swift:37:1 - line:37:12]
      (call_expr type='()' location=main.swift:37:1 range=[main.swift:37:1 - line:37:12] nothrow
        (declref_expr type='(Any..., String, String) -> ()' location=main.swift:37:1 range=[main.swift:37:1 - line:37:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (argument_list labels=_:separator:terminator:
          (argument
            (vararg_expansion_expr implicit type='Any...' location=main.swift:37:7 range=[main.swift:37:7 - line:37:11]
              (array_expr implicit type='Any...' location=main.swift:37:7 range=[main.swift:37:7 - line:37:11] initializer=**NULL**
                (erasure_expr implicit type='Any' location=main.swift:37:10 range=[main.swift:37:7 - line:37:11]
                  (binary_expr type='Int' location=main.swift:37:10 range=[main.swift:37:7 - line:37:11] nothrow
                    (dot_syntax_call_expr implicit type='(Int, Int) -> Int' location=main.swift:37:10 range=[main.swift:37:10 - line:37:10] nothrow
                      (declref_expr type='(Int.Type) -> (Int, Int) -> Int' location=main.swift:37:10 range=[main.swift:37:10 - line:37:10] decl=Swift.(file).Int extension./ function_ref=single)
                      (argument_list implicit
                        (argument
                          (type_expr implicit type='Int.Type' location=main.swift:37:10 range=[main.swift:37:10 - line:37:10] typerepr='Int'))
                      ))
                    (argument_list implicit
                      (argument
                        (declref_expr type='Int' location=main.swift:37:7 range=[main.swift:37:7 - line:37:7] decl=main.(file).num@main.swift:35:5 function_ref=unapplied))
                      (argument
                        (declref_expr type='Int' location=main.swift:37:11 range=[main.swift:37:11 - line:37:11] decl=main.(file).m@main.swift:4:5 function_ref=unapplied))
                    ))))))
          (argument label=separator
            (default_argument_expr implicit type='String' location=main.swift:37:6 range=[main.swift:37:6 - line:37:6] default_args_owner=Swift.(file).print(_:separator:terminator:) param=1))
          (argument label=terminator
            (default_argument_expr implicit type='String' location=main.swift:37:6 range=[main.swift:37:6 - line:37:6] default_args_owner=Swift.(file).print(_:separator:terminator:) param=2))
        )))))