(source_file "main.swift"
  (top_level_code_decl range=[main.swift:3:1 - line:3:24]
    (brace_stmt implicit range=[main.swift:3:1 - line:3:24]
      (pattern_binding_decl range=[main.swift:3:1 - line:3:24]
        (pattern_typed type='Int'
          (pattern_named type='Int' 'lowerLimit')
          (type_ident
            (component id='Int' bind=Swift.(file).Int)))
        Original init:
        (integer_literal_expr type='Int' location=main.swift:3:24 range=[main.swift:3:24 - line:3:24] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)
        Processed init:
        (integer_literal_expr type='Int' location=main.swift:3:24 range=[main.swift:3:24 - line:3:24] value=1 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**))
))
  (var_decl range=[main.swift:3:5 - line:3:5] "lowerLimit" type='Int' interface type='Int' access=internal let readImpl=stored immutable)
  (top_level_code_decl range=[main.swift:4:1 - line:4:24]
    (brace_stmt implicit range=[main.swift:4:1 - line:4:24]
      (pattern_binding_decl range=[main.swift:4:1 - line:4:24]
        (pattern_typed type='Int'
          (pattern_named type='Int' 'upperLimit')
          (type_ident
            (component id='Int' bind=Swift.(file).Int)))
        Original init:
        (integer_literal_expr type='Int' location=main.swift:4:24 range=[main.swift:4:24 - line:4:24] value=3 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**)
        Processed init:
        (integer_literal_expr type='Int' location=main.swift:4:24 range=[main.swift:4:24 - line:4:24] value=3 builtin_initializer=Swift.(file).Int.init(_builtinIntegerLiteral:) initializer=**NULL**))
))
  (var_decl range=[main.swift:4:5 - line:4:5] "upperLimit" type='Int' interface type='Int' access=internal let readImpl=stored immutable)
  (top_level_code_decl range=[main.swift:9:1 - line:11:1]
    (brace_stmt implicit range=[main.swift:9:1 - line:11:1]
      (for_each_stmt range=[main.swift:9:1 - line:11:1]
        (pattern_named type='Int' 'i')
        (pattern_named type='Int' 'i')
        (call_expr type='StrideThrough<Int>' location=main.swift:9:10 range=[main.swift:9:10 - line:9:70] nothrow
          (declref_expr type='(Int, Int, Int) -> StrideThrough<Int>' location=main.swift:9:10 range=[main.swift:9:10 - line:9:10] decl=Swift.(file).stride(from:through:by:) [with (substitution_map generic_signature=<T where T : Strideable> (substitution T -> Int))] function_ref=single)
          (argument_list labels=from:through:by:
            (argument label=from
              (declref_expr type='Int' location=main.swift:9:23 range=[main.swift:9:23 - line:9:23] decl=main.(file).lowerLimit@main.swift:3:5 function_ref=unapplied))
            (argument label=through
              (declref_expr type='Int' location=main.swift:9:44 range=[main.swift:9:44 - line:9:44] decl=main.(file).upperLimit@main.swift:4:5 function_ref=unapplied))
            (argument label=by
              (declref_expr type='Int' location=main.swift:9:60 range=[main.swift:9:60 - line:9:60] decl=main.(file).lowerLimit@main.swift:3:5 function_ref=unapplied))
          ))
        (pattern_binding_decl implicit
          (pattern_named implicit type='StrideThroughIterator<Int>' '$i$generator')
          Processed init:
          (call_expr implicit type='StrideThroughIterator<Int>' location=main.swift:9:10 range=[main.swift:9:10 - line:9:70] nothrow
            (dot_syntax_call_expr implicit type='() -> StrideThroughIterator<Int>' location=main.swift:9:10 range=[main.swift:9:10 - line:9:70] nothrow
              (declref_expr implicit type='(__owned StrideThrough<Int>) -> () -> StrideThroughIterator<Int>' decl=Swift.(file).StrideThrough extension.makeIterator() [with (substitution_map generic_signature=<Element where Element : Strideable> (substitution Element -> Int))] function_ref=compound)
              (argument_list implicit
                (argument
                  (call_expr type='StrideThrough<Int>' location=main.swift:9:10 range=[main.swift:9:10 - line:9:70] nothrow
                    (declref_expr type='(Int, Int, Int) -> StrideThrough<Int>' location=main.swift:9:10 range=[main.swift:9:10 - line:9:10] decl=Swift.(file).stride(from:through:by:) [with (substitution_map generic_signature=<T where T : Strideable> (substitution T -> Int))] function_ref=single)
                    (argument_list labels=from:through:by:
                      (argument label=from
                        (declref_expr type='Int' location=main.swift:9:23 range=[main.swift:9:23 - line:9:23] decl=main.(file).lowerLimit@main.swift:3:5 function_ref=unapplied))
                      (argument label=through
                        (declref_expr type='Int' location=main.swift:9:44 range=[main.swift:9:44 - line:9:44] decl=main.(file).upperLimit@main.swift:4:5 function_ref=unapplied))
                      (argument label=by
                        (declref_expr type='Int' location=main.swift:9:60 range=[main.swift:9:60 - line:9:60] decl=main.(file).lowerLimit@main.swift:3:5 function_ref=unapplied))
                    )))
              ))
            (argument_list implicit)))

        (call_expr implicit type='Int?' nothrow
          (dot_syntax_call_expr implicit type='() -> Int?' nothrow
            (declref_expr implicit type='(inout StrideThroughIterator<Int>) -> () -> Int?' decl=Swift.(file).StrideThroughIterator extension.next() [with (substitution_map generic_signature=<Element where Element : Strideable> (substitution Element -> Int))] function_ref=compound)
            (argument_list implicit
              (argument inout
                (inout_expr implicit type='inout StrideThroughIterator<Int>'
                  (declref_expr implicit type='@lvalue StrideThroughIterator<Int>' decl=main.(file).top-level code.$i$generator@main.swift:9:10 function_ref=unapplied)))
            ))
          (argument_list implicit))
        (brace_stmt range=[main.swift:9:72 - line:11:1]
          (call_expr type='()' location=main.swift:10:5 range=[main.swift:10:5 - line:10:66] nothrow
            (declref_expr type='(Any..., String, String) -> ()' location=main.swift:10:5 range=[main.swift:10:5 - line:10:5] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
            (argument_list labels=_:separator:terminator:
              (argument
                (vararg_expansion_expr implicit type='Any...' location=main.swift:10:11 range=[main.swift:10:11 - line:10:11]
                  (array_expr implicit type='Any...' location=main.swift:10:11 range=[main.swift:10:11 - line:10:11] initializer=**NULL**
                    (erasure_expr implicit type='Any' location=main.swift:10:11 range=[main.swift:10:11 - line:10:11]
                      (interpolated_string_literal_expr type='String' location=main.swift:10:11 range=[main.swift:10:11 - line:10:11] trailing_quote_loc=main.swift:10:65 literal_capacity=49 interpolation_count=1 builder_init=Swift.(file).DefaultStringInterpolation.init(literalCapacity:interpolationCount:) result_init=Swift.(file).String extension.init(stringInterpolation:)
                        (tap_expr implicit type='DefaultStringInterpolation' location=main.swift:10:11 range=[main.swift:10:11 - line:10:11] var=main.(file).top-level code.$interpolation
                          (opaque_value_expr implicit type='DefaultStringInterpolation' location=main.swift:10:11 range=[main.swift:10:11 - line:10:11] @ 0x55717fc223e8)
                          (brace_stmt implicit range=[main.swift:10:11 - line:10:11]
                            (var_decl implicit "$interpolation" type='DefaultStringInterpolation' interface type='DefaultStringInterpolation' access=fileprivate readImpl=stored writeImpl=stored readWriteImpl=stored)

                            (call_expr implicit type='()' location=main.swift:10:12 range=[main.swift:10:12 - line:10:11] nothrow
                              (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:10:12 range=[main.swift:10:12 - line:10:12] nothrow
                                (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=double)
                                (argument_list implicit
                                  (argument inout
                                    (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:10:12 range=[main.swift:10:12 - line:10:12]
                                      (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:10:12 range=[main.swift:10:12 - line:10:12] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                                ))
                              (argument_list implicit
                                (argument
                                  (string_literal_expr type='String' location=main.swift:10:11 range=[main.swift:10:11 - line:10:11] encoding=utf8 value="Bus #23 is stopping at station #" builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))
                              ))
                            (call_expr type='()' location=main.swift:10:45 range=[main.swift:10:45 - line:10:47] nothrow
                              (dot_syntax_call_expr implicit type='(Int) -> ()' location=main.swift:10:45 range=[main.swift:10:45 - line:10:45] nothrow
                                (declref_expr implicit type='(inout DefaultStringInterpolation) -> (Int) -> ()' location=main.swift:10:45 range=[main.swift:10:45 - line:10:45] decl=Swift.(file).DefaultStringInterpolation.appendInterpolation [with (substitution_map generic_signature=<T where T : CustomStringConvertible> (substitution T -> Int))] function_ref=double)
                                (argument_list implicit
                                  (argument inout
                                    (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:10:45 range=[main.swift:10:45 - line:10:45]
                                      (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:10:45 range=[main.swift:10:45 - line:10:45] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                                ))
                              (argument_list
                                (argument
                                  (declref_expr type='Int' location=main.swift:10:46 range=[main.swift:10:46 - line:10:46] decl=main.(file).top-level code.i@main.swift:9:5 function_ref=unapplied))
                              ))
                            (call_expr implicit type='()' location=main.swift:10:48 range=[main.swift:10:48 - line:10:48] nothrow
                              (dot_syntax_call_expr implicit type='(String) -> ()' location=main.swift:10:48 range=[main.swift:10:48 - line:10:48] nothrow
                                (declref_expr implicit type='(inout DefaultStringInterpolation) -> (String) -> ()' decl=Swift.(file).DefaultStringInterpolation.appendLiteral function_ref=double)
                                (argument_list implicit
                                  (argument inout
                                    (inout_expr implicit type='inout DefaultStringInterpolation' location=main.swift:10:48 range=[main.swift:10:48 - line:10:48]
                                      (declref_expr implicit type='@lvalue DefaultStringInterpolation' location=main.swift:10:48 range=[main.swift:10:48 - line:10:48] decl=main.(file).top-level code.$interpolation function_ref=unapplied)))
                                ))
                              (argument_list implicit
                                (argument
                                  (string_literal_expr type='String' location=main.swift:10:48 range=[main.swift:10:48 - line:10:48] encoding=utf8 value=" for two minutes." builtin_initializer=Swift.(file).String extension.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))
                              )))))))))
              (argument label=separator
                (default_argument_expr implicit type='String' location=main.swift:10:10 range=[main.swift:10:10 - line:10:10] default_args_owner=Swift.(file).print(_:separator:terminator:) param=1))
              (argument label=terminator
                (default_argument_expr implicit type='String' location=main.swift:10:10 range=[main.swift:10:10 - line:10:10] default_args_owner=Swift.(file).print(_:separator:terminator:) param=2))
            )))))))